@base         <urn:pipeline:xrm> .
@prefix p:     <https://pipeline.described.at/> .
@prefix code: <https://code.described.at/> .
@prefix rdf:  <http://www.w3.org/1999/02/22-rdf-syntax-ns#> .

##
## Variables
##

_:variablesObservation p:variable
    [ a p:Variable; p:name "mappingsDir"; p:value "observation/*.json" ] ,
    [ a p:Variable; p:name "inputDir"; p:value "input" ]
.

_:variablesDimension  p:variable
    [ a p:Variable; p:name "mappingsDir"; p:value "src-gen/*.json" ] ,
    [ a p:Variable; p:name "inputDir"; p:value "input" ]
.

_:variablesSource p:variable
  [ a p:Variable; p:name "sourceDir"; p:value "input" ]
.

_:variablesOutput p:variable
    [ a p:Variable; p:name "targetFile"; p:value "output/transformed.nt" ],
    [ a p:Variable; p:name "sourceDir"; p:value "input" ]
.

_:voidData a p:Variable;
  p:name "inputFile";
  p:value "input/void.ttl".


##
## Pipelines
##

<#MainFile> a p:Pipeline ;
    p:steps [ p:stepList ( <#mergeInputs> <#streamOutputStep> ) ] ;
    p:variables _:variablesOutput .

<#MainStore> a p:Pipeline ;
    p:steps [ p:stepList ( <#mergeInputs> <#setGraph> <#upload> ) ] ;
    p:variables _:variablesSource .

<#Fetch> a p:Pipeline , p:Readable ;
  p:steps [ p:stepList (<#downloadSftp> <#extract>  )] ;
  p:variables _:variablesSource .

##
## Steps
##

<#mergeInputs> a p:Step ;
    code:implementedBy [ a code:EcmaScript ;
    code:link <node:barnard59-base#concat.object> ] ;
    code:arguments     ( <#addVoid> <#TransformDimensions> <#TransformObservations> ) .

<#streamOutputStep> a p:Step ;
    code:implementedBy [ a code:EcmaScript ;
      code:link <file:../lib/pipeline#asStep> ] ;
    code:arguments     ( <#StreamOutputFile> ) .

<#StreamOutputFile> a p:Pipeline, p:WritableObjectMode ;
    p:steps     [ p:stepList ( <#serialize> <#save> ) ] .

<#serialize> a p:Step ;
    code:implementedBy [  a code:EcmaScript ;
    code:link <node:barnard59-formats/ntriples.js#serialize> ] .

<#save> a p:Step ;
    code:implementedBy [ a code:EcmaScript ; 
      code:link <node:fs#createWriteStream> ] ;
    code:arguments     ( "targetFile"^^p:VariableName ) .

<#StreamOutputStore> a p:Step ;
    p:steps     [ p:stepList ( <#setGraph> <#upload> ) ] .

# ------------------------------
#
# Transform pipeline
#
# One-by-one parses and transforms the source csv files to RDF
#
# ------------------------------

<#TransformDimensions> a p:Pipeline, p:ReadableObjectMode ;
    p:steps [ p:stepList ( <#loadMappings> <#doTransformDimensions> ) ] ;
    p:variables _:variablesDimension  .

<#TransformObservations> a p:Pipeline, p:ReadableObjectMode ;
    p:steps [ p:stepList ( <#loadMappings> <#doTransformObservations> ) ] ;
    p:variables _:variablesObservation .

<#loadMappings> a p:Step ;
    code:implementedBy [ a code:EcmaScript ;
      code:link <node:barnard59-base#glob> ] ;
    code:arguments     [ code:name  "pattern" ;
                         code:value "mappingsDir"^^p:VariableName ] .

<#doTransformDimensions> a p:Step ;
    code:implementedBy [ a code:EcmaScript ;
      code:link <node:barnard59-core#forEach> ] ;
    code:arguments     ( <#TransformCsvDimensions>
                         "(p, fileName) => { p.variables.set('csvw', fileName) }"^^code:EcmaScript ) .

<#doTransformObservations> a p:Step ;
    code:implementedBy [ a code:EcmaScript ;
      code:link <node:barnard59-core#forEach> ] ;
    code:arguments     ( <#TransformCsvObservations>
                         "(p, fileName) => { p.variables.set('csvw', fileName) }"^^code:EcmaScript ) .

# ------------------------------
#
# Transforms individual files
#
# ------------------------------

<#TransformCsvDimensions> a p:Pipeline, p:ReadableObjectMode ;
    p:steps [ p:stepList (
        <#loadCsvStep>
        <#parse>
        <#filterAll>
        <#referenceTimeToIri>
        <#flatten> 
      )
    ] .

<#TransformCsvObservations> a p:Pipeline, p:ReadableObjectMode ;
    p:steps [
      p:stepList (
        <#loadCsvStep>
        <#parse>
        <#mapAll>
        <#filterAll>
        <#toDataset>
        <#toObservation>
        <#toCubeShape>
        <#flatten>
      )
    ] .

<#LoadCsv> a p:Pipeline, p:ReadableObjectMode ;
    p:steps [ p:stepList ( <#openCsvFromFilesystem> ) ] .

<#openCsvFromFilesystem> a p:Step ;
    code:implementedBy [ a code:EcmaScript ;
      code:link <file:../lib/csv#openFromCsvw> ] ;
     code:arguments     ( "${csvw}"^^code:EcmaScriptTemplateLiteral ) . 

<#loadCsvStep> a p:Step ;
    code:implementedBy [ a code:EcmaScript ;
      code:link <file:../lib/pipeline#asStep>  ] ;
    code:arguments     ( <#LoadCsv> ) .

<#parse> a p:Step ;
    code:implementedBy [ a code:EcmaScript ;
      code:link <node:barnard59-formats#csvw.parse> ] ;
    code:arguments     ( <#parseMetadata> ) .

<#parseMetadata> a p:Pipeline, p:ReadableObjectMode ;
    p:steps [ p:stepList ( <#readMetadata> <#parseMetadataStep> ) ] .

<#parseMetadataStep> a p:Step ;
    code:implementedBy [ a code:EcmaScript ;
      code:link <node:barnard59-formats#jsonld.parse> ] .

<#readMetadata> a p:Step ;
    code:implementedBy [ a code:EcmaScript ; 
      code:link <node:fs#createReadStream> ] ;
    code:arguments     ( "${csvw}"^^code:EcmaScriptTemplateLiteral ) .

<#filterAll> a p:Step ;
    code:implementedBy [ a code:EcmaScript ;
                         code:link <node:barnard59-base#filter> ] ;
    code:arguments     ( [ a code:EcmaScript;
      code:link <file:../lib/steps-filter#all> ] ) .

<#mapAll> a p:Step;
  code:implementedBy [ a code:EcmaScript;
    code:link <node:barnard59-base#map>
 ];
 code:arguments ( [ a code:EcmaScript ;
                    code:link <file:../lib/steps-map#all>
                  ] ).

<#referenceTimeToIri> a p:Step;
  code:implementedBy [ a code:EcmaScript;
    code:link <node:barnard59-base#map>
 ];
 code:arguments ( [ a code:EcmaScript ;
                    code:link <file:../lib/steps-map#referenceTimeToIri>
                  ] ).

<#toDataset> a p:Step;
  code:implementedBy [ a code:EcmaScript;
    code:link <node:rdf-stream-to-dataset-stream/bySubject.js>
  ].

<#toObservation> a p:Step;
  code:implementedBy [ a code:EcmaScript;
    code:link <node:barnard59-rdf/cube.js#toObservation>
  ];
  code:arguments [
    code:name "observer";
    code:value "https://ld.stadt-zuerich.ch/"
  ], [
    code:name "observations";
    code:value """({ dataset }) => {
      const rdf = require('rdf-ext')
      const quad = [...dataset][0]
      const parts = quad.subject.value.split('/')
      const baseIri = parts.slice(0, -3).join('/')
      const cubeId = parts.slice(-3, -2)[0].split('-').filter(s => s !== 'XXX').join('-')
      const observationsPath = parts.slice(-2)[0]
      const observationsIri = [baseIri, cubeId, observationsPath].join('/') + '/'

      return rdf.namedNode(observationsIri)
    }"""^^code:EcmaScript
  ], [
    code:name "observation";
    code:value """({ dataset, observations }) => {
      const rdf = require('rdf-ext')
      const quad = [...dataset][0]
      const parts = quad.subject.value.split('/')
      const groupId = parts.slice(-1)[0].split('-').slice(0, -2).filter(s => s !== 'XXX0000').join('-')
      const raumZeitId = parts.slice(-1)[0].split('-').slice(-2).join('-')
      const observationId = [groupId, raumZeitId].filter(Boolean).join('-')

      const observationIri = observations.value + observationId

      return rdf.namedNode(observationIri)
    }"""^^code:EcmaScript
  ].

<#toCubeShape> a p:Step;
  code:implementedBy [ a code:EcmaScript;
    code:link <file:../lib/toCubeShape>
  ];
  code:arguments [
    code:name "excludeValuesOf";
    code:value (
      "http://www.w3.org/2004/02/skos/core#notation"
      "https://ld.stadt-zuerich.ch/statistics/attribute/BEZUGSZEIT"
      "https://ld.stadt-zuerich.ch/statistics/attribute/ERWARTETE_AKTUALISIERUNG"
    )
  ].

<#flatten> a p:Step;
  code:implementedBy [ a code:EcmaScript;
    code:link <node:barnard59-base#flatten>;
  ].

<#setGraph> a p:Step;
  code:implementedBy [ a code:EcmaScript;
    code:link <node:barnard59-base#setGraph>
  ];
  code:arguments ( "graph"^^p:VariableName ).

<#upload> a p:Step;
  code:implementedBy [ a code:EcmaScript;
    code:link <node:barnard59-graph-store#put>
  ];
  code:arguments [
    code:name "endpoint";
    code:value "endpoint"^^p:VariableName
  ], [
    code:name "user";
    code:value "user"^^p:VariableName
  ], [
    code:name "password";
    code:value "password"^^p:VariableName
  ], [
    code:name "maxQuadsPerRequest";
    code:value "500000000"
  ].

<#append> a p:Step;
  code:implementedBy [ a code:EcmaScript;
    code:link <node:barnard59-graph-store#post>
  ];
  code:arguments [
    code:name "endpoint";
    code:value "endpoint"^^p:VariableName
  ], [
    code:name "user";
    code:value "user"^^p:VariableName
  ], [
    code:name "password";
    code:value "password"^^p:VariableName
  ], [
    code:name "maxQuadsPerRequest";
    code:value "500000000"
  ].

##
## sftp
##

<#downloadSftp> a p:Step ;
  code:implementedBy
    [
      code:link <node:barnard59-ftp#read> ;
      a code:EcmaScript
    ] ;
  code:arguments [
    code:name "protocol";
    code:value "sftp"
  ], [
    code:name "user";
    code:value "statistikstadtzuerich"
  ], [
    code:name "host";
    code:value "sftp.zazukoians.org"
  ], [
    code:name "filename";
    code:value "/upload/integ/HDB_Full.zip"
  ], [
    code:name "privateKey";
    code:value "${process.env.SSH_PRIVATE_KEY}"^^code:EcmaScriptTemplateLiteral
    #code:value "privateKey"^^:VariableName
  ].

<#extract> a p:Step ;
  code:implementedBy
    [
      code:link <file:../lib/zip#extract> ;
      a code:EcmaScript
    ] ;
  code:arguments (
    "sourceDir"^^p:VariableName
  ).


##
## Metadata
##

<#parseTurtle> a p:Step ;
  code:implementedBy [
    code:link <node:barnard59-formats#n3.parse> ;
    a code:EcmaScript
  ] .

<#readFile> a p:Step;
  code:implementedBy [ a code:EcmaScript;
    code:link <node:fs#createReadStream>
  ];
  code:arguments ("inputFile"^^p:VariableName).

<#addVoid> a p:Pipeline, p:ReadableObjectMode;
  p:variables [
    p:variable _:voidData
  ];
  p:steps [
    p:stepList (<#readFile> <#parseTurtle> )
  ].
